name: kernel-build

on:
  push:
    paths:
      - 'kernel/**'
      - '.github/workflows/kernel.yml'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        arch:
          - x86_64
          - aarch64
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./kernel
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust
        run: |
          rustup toolchain install nightly
          rustup component add rust-src

      - run: sudo apt-get install -y llvm lld

      - name: install aarch64 C library
        if: matrix.arch == 'aarch64'
        run: sudo apt-get install -y libc6-dev-arm64-cross libgcc-12-dev-arm64-cross

      - name: Get additional RUSTFLAGS for cross compilation
        if: matrix.arch == 'aarch64'
        run: echo "CROSS_COMPILE_RUSTFLAGS=-C link-arg=--sysroot=/usr/aarch64-linux-gnu -C link-arg=-Wl,--sysroot=/" >> $GITHUB_ENV

      - name: build test binary
        env:
          RUSTFLAGS: -C linker=clang -C linker-flavor=gcc -C link-arg=-fuse-ld=lld -C link-arg=--target=${{ matrix.arch }}-unknown-linux-gnu ${{ env.CROSS_COMPILE_RUSTFLAGS }}
        run: |
          echo '#!/bin/sh' >> test.sh
          echo -n ''./'' >> test.sh
          cargo test --verbose --target ${{ matrix.arch }}-unknown-linux-gnu -Z build-std=core,alloc,test,panic_unwind --no-run 2>&1 | tee out.log
          grep "Executable" out.log | realpath --relative-to=. $(sed -r -e 's/^.*[\(`](.*)[\)`]$/\1/') >> test.sh
          chmod +x test.sh

      - name: run test binary in docker (non-native)
        if: matrix.arch == 'aarch64'
        run: |
          cat test.sh
          file test.sh
          docker run --rm --platform linux/arm64 -v ${{ github.workspace }}:/workspace --workdir /workspace/kernel ubuntu:22.04 cat ./test.sh

      - name: run tests natively (x86_64 only)
        if: matrix.arch == 'x86_64'
        run: ./test.sh

      - name: Build
        run: |
          ARCH=${{ matrix.arch }} PROFILE=release PROFILE_OPTION=--release SOURCED_CONFIG=y ./build.sh
